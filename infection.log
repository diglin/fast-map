Escaped mutants:
================


1) /var/www/html/src/CompiledMapper.php:26    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function __construct(Compiler $compiler, string $fqcn, string $cachePath, MapperInterface ...$mappers)
     {
         $this->compiler = $compiler;
-        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
+        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 2);
         $className = substr($fqcn, strpos($fqcn, '\\') + 1);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }


2) /var/www/html/src/CompiledMapper.php:26    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function __construct(Compiler $compiler, string $fqcn, string $cachePath, MapperInterface ...$mappers)
     {
         $this->compiler = $compiler;
-        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
+        $namespace = substr($fqcn, -1, strpos($fqcn, '\\') + 1);
         $className = substr($fqcn, strpos($fqcn, '\\') + 1);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }


3) /var/www/html/src/CompiledMapper.php:26    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     public function __construct(Compiler $compiler, string $fqcn, string $cachePath, MapperInterface ...$mappers)
     {
         $this->compiler = $compiler;
-        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
+        $namespace = substr($fqcn, 1, strpos($fqcn, '\\') + 1);
         $className = substr($fqcn, strpos($fqcn, '\\') + 1);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }


4) /var/www/html/src/CompiledMapper.php:26    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     public function __construct(Compiler $compiler, string $fqcn, string $cachePath, MapperInterface ...$mappers)
     {
         $this->compiler = $compiler;
-        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
+        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 0);
         $className = substr($fqcn, strpos($fqcn, '\\') + 1);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }


5) /var/www/html/src/CompiledMapper.php:26    [M] Plus

--- Original
+++ New
@@ @@
     public function __construct(Compiler $compiler, string $fqcn, string $cachePath, MapperInterface ...$mappers)
     {
         $this->compiler = $compiler;
-        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
+        $namespace = substr($fqcn, 0, strpos($fqcn, '\\') - 1);
         $className = substr($fqcn, strpos($fqcn, '\\') + 1);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }


6) /var/www/html/src/CompiledMapper.php:27    [M] IncrementInteger

--- Original
+++ New
@@ @@
     {
         $this->compiler = $compiler;
         $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
-        $className = substr($fqcn, strpos($fqcn, '\\') + 1);
+        $className = substr($fqcn, strpos($fqcn, '\\') + 2);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }
     public function __invoke($input, $output) : array


7) /var/www/html/src/CompiledMapper.php:27    [M] OneZeroInteger

--- Original
+++ New
@@ @@
     {
         $this->compiler = $compiler;
         $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
-        $className = substr($fqcn, strpos($fqcn, '\\') + 1);
+        $className = substr($fqcn, strpos($fqcn, '\\') + 0);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }
     public function __invoke($input, $output) : array


8) /var/www/html/src/CompiledMapper.php:27    [M] Plus

--- Original
+++ New
@@ @@
     {
         $this->compiler = $compiler;
         $namespace = substr($fqcn, 0, strpos($fqcn, '\\') + 1);
-        $className = substr($fqcn, strpos($fqcn, '\\') + 1);
+        $className = substr($fqcn, strpos($fqcn, '\\') - 1);
         $this->compilationContext = new CompilationContext($cachePath . $className . '.php', $namespace, $className, ...$mappers);
     }
     public function __invoke($input, $output) : array


9) /var/www/html/src/MappingDefinition/MappingIterator.php:29    [M] Break_

--- Original
+++ New
@@ @@
         foreach ($builders as $builder) {
             if ($builder->matches($metadata)) {
                 $this->inner = $builder->walk($metadata);
-                break;
+                continue;
             }
         }
     }


10) /var/www/html/src/MappingDefinition/MappingIterator.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function rewind()
     {
-        $this->inner->rewind();
+        
     }
     public function hasChildren()
     {


11) /var/www/html/src/MappingDefinition/PathMappingIterator.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function rewind()
     {
-        $this->inner->rewind();
+        
     }
 }

Timed Out mutants:
==================

Not Covered mutants:
====================


1) /var/www/html/src/CompiledMapper.php:39    [M] Identical

--- Original
+++ New
@@ @@
     }
     public function __invoke($input, $output) : array
     {
-        if ($this->compiledMapper === null) {
+        if ($this->compiledMapper !== null) {
             $this->compiledMapper = $this->compiler->compile($this->compilationContext);
         }
         return $this->compiledMapper->map($input, $output);
     }

2) /var/www/html/src/Compiler/Builder/ArrayInitialisationPreconditionBuilder.php:26    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
     }
 }


3) /var/www/html/src/Compiler/Builder/ArrayInitialisationPreconditionBuilder.php:28    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), []);
     }
 }


4) /var/www/html/src/Compiler/Builder/ArrayInitialisationPreconditionBuilder.php:29    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => []]);
     }
 }


5) /var/www/html/src/Compiler/Builder/ArrayInitialisationPreconditionBuilder.php:33    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], [])))]]);
     }
 }


6) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:36    [M] Foreach_

--- Original
+++ New
@@ @@
         $conditions = new \SplQueue();
         $initialisations = new \SplQueue();
         $pathNode = $this->pathNode;
-        foreach ($iterator = $this->propertyPath->getIterator() as $item) {
+        foreach (array() as $item) {
             if ($iterator->isIndex()) {
                 $pathNode = new Node\Expr\ArrayDimFetch($pathNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
                 continue;


7) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:43    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($iterator = $this->propertyPath->getIterator() as $item) {
             if ($iterator->isIndex()) {
                 $pathNode = new Node\Expr\ArrayDimFetch($pathNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
-                continue;
+                break;
             }
             if ($iterator->isProperty()) {
                 $pathNode = new Node\Expr\PropertyFetch($pathNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Name($item));


8) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:52    [M] Continue_

--- Original
+++ New
@@ @@
             }
             if ($iterator->isProperty()) {
                 $pathNode = new Node\Expr\PropertyFetch($pathNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Name($item));
-                continue;
+                break;
             }
             throw new \RuntimeException('Path spec should be either an array dimension access or an object property access.');
         }


9) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:55    [M] Throw_

--- Original
+++ New
@@ @@
                 $pathNode = new Node\Expr\PropertyFetch($pathNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Name($item));
                 continue;
             }
-            throw new \RuntimeException('Path spec should be either an array dimension access or an object property access.');
+            new \RuntimeException('Path spec should be either an array dimension access or an object property access.');
         }
         return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
     }


10) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:60    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             }
             throw new \RuntimeException('Path spec should be either an array dimension access or an object property access.');
         }
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
     }
     private function propertyFetch(PropertyPathIteratorInterface $iterator, Node\Expr $pathNode)
     {


11) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:62    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             }
             throw new \RuntimeException('Path spec should be either an array dimension access or an object property access.');
         }
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), []);
     }
     private function propertyFetch(PropertyPathIteratorInterface $iterator, Node\Expr $pathNode)
     {


12) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:63    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             }
             throw new \RuntimeException('Path spec should be either an array dimension access or an object property access.');
         }
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => []]);
     }
     private function propertyFetch(PropertyPathIteratorInterface $iterator, Node\Expr $pathNode)
     {


13) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:67    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             }
             throw new \RuntimeException('Path spec should be either an array dimension access or an object property access.');
         }
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\Array_([], [])))]]);
     }
     private function propertyFetch(PropertyPathIteratorInterface $iterator, Node\Expr $pathNode)
     {


14) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:81    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     private function propertyFetch(PropertyPathIteratorInterface $iterator, Node\Expr $pathNode)
     {
-        while ($iterator->valid() && $iterator->isProperty()) {
+        while ($iterator->valid() || $iterator->isProperty()) {
             $item = $iterator->current();
             $pathNode = new Node\Expr\PropertyFetch($pathNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Name($item));
             $iterator->next();


15) /var/www/html/src/Compiler/Builder/CompositeInitialisationPreconditionBuilder.php:89    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         while ($iterator->valid() && $iterator->isProperty()) {
             $item = $iterator->current();
             $pathNode = new Node\Expr\PropertyFetch($pathNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Name($item));
-            $iterator->next();
+            
         }
     }
 }


16) /var/www/html/src/Compiler/Builder/ObjectInitialisationPreconditionBuilder.php:30    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\New_(new Node\Name($this->metadata->name))))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\New_(new Node\Name($this->metadata->name))))]]);
     }
 }


17) /var/www/html/src/Compiler/Builder/ObjectInitialisationPreconditionBuilder.php:32    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\New_(new Node\Name($this->metadata->name))))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), []);
     }
 }


18) /var/www/html/src/Compiler/Builder/ObjectInitialisationPreconditionBuilder.php:33    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => [new Node\Stmt\Expression(new Node\Expr\Assign($this->pathNode, new Node\Expr\New_(new Node\Name($this->metadata->name))))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([$this->pathNode])), ['stmts' => []]);
     }
 }


19) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:30    [M] LessThan

--- Original
+++ New
@@ @@
     {
         $pathNode = $this->pathNode;
         $iterator = $this->propertyPath->getIterator();
-        if ($this->limit < 0) {
+        if ($this->limit <= 0) {
             $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
         } else {
             if ($this->limit !== null) {


20) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:30    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     {
         $pathNode = $this->pathNode;
         $iterator = $this->propertyPath->getIterator();
-        if ($this->limit < 0) {
+        if ($this->limit >= 0) {
             $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
         } else {
             if ($this->limit !== null) {


21) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:31    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $pathNode = $this->pathNode;
         $iterator = $this->propertyPath->getIterator();
         if ($this->limit < 0) {
-            $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
+            $iterator = new \LimitIterator($iterator, -1, iterator_count($iterator) + $this->limit);
         } else {
             if ($this->limit !== null) {
                 $iterator = new \LimitIterator($iterator, 0, $this->limit);


22) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:31    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $pathNode = $this->pathNode;
         $iterator = $this->propertyPath->getIterator();
         if ($this->limit < 0) {
-            $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
+            $iterator = new \LimitIterator($iterator, 1, iterator_count($iterator) + $this->limit);
         } else {
             if ($this->limit !== null) {
                 $iterator = new \LimitIterator($iterator, 0, $this->limit);


23) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:31    [M] Plus

--- Original
+++ New
@@ @@
         $pathNode = $this->pathNode;
         $iterator = $this->propertyPath->getIterator();
         if ($this->limit < 0) {
-            $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
+            $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) - $this->limit);
         } else {
             if ($this->limit !== null) {
                 $iterator = new \LimitIterator($iterator, 0, $this->limit);


24) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:32    [M] NotIdentical

--- Original
+++ New
@@ @@
         if ($this->limit < 0) {
             $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
         } else {
-            if ($this->limit !== null) {
+            if ($this->limit === null) {
                 $iterator = new \LimitIterator($iterator, 0, $this->limit);
             }
         }


25) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:33    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
         } else {
             if ($this->limit !== null) {
-                $iterator = new \LimitIterator($iterator, 0, $this->limit);
+                $iterator = new \LimitIterator($iterator, -1, $this->limit);
             }
         }
         foreach ($iterator as $index => $child) {


26) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:33    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $iterator = new \LimitIterator($iterator, 0, iterator_count($iterator) + $this->limit);
         } else {
             if ($this->limit !== null) {
-                $iterator = new \LimitIterator($iterator, 0, $this->limit);
+                $iterator = new \LimitIterator($iterator, 1, $this->limit);
             }
         }
         foreach ($iterator as $index => $child) {


27) /var/www/html/src/Compiler/Builder/PropertyPathBuilder.php:36    [M] Foreach_

--- Original
+++ New
@@ @@
                 $iterator = new \LimitIterator($iterator, 0, $this->limit);
             }
         }
-        foreach ($iterator as $index => $child) {
+        foreach (array() as $index => $child) {
             if ($this->propertyPath->isIndex($index)) {
                 $pathNode = new Node\Expr\ArrayDimFetch($pathNode, new Node\Scalar\String_($child));
             } else {


28) /var/www/html/src/Compiler/Builder/RequiredValuePreconditionBuilder.php:26    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' => $this->propertyPath]))]))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' => $this->propertyPath]))]))]]);
     }
 }


29) /var/www/html/src/Compiler/Builder/RequiredValuePreconditionBuilder.php:30    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' => $this->propertyPath]))]))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), []);
     }
 }


30) /var/www/html/src/Compiler/Builder/RequiredValuePreconditionBuilder.php:31    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' => $this->propertyPath]))]))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => []]);
     }
 }


31) /var/www/html/src/Compiler/Builder/RequiredValuePreconditionBuilder.php:33    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' => $this->propertyPath]))]))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), []))]]);
     }
 }


32) /var/www/html/src/Compiler/Builder/RequiredValuePreconditionBuilder.php:36    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' => $this->propertyPath]))]))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', []))]))]]);
     }
 }


33) /var/www/html/src/Compiler/Builder/RequiredValuePreconditionBuilder.php:37    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getNode() : Node
     {
-        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' => $this->propertyPath]))]))]]);
+        return new Node\Stmt\If_(new Node\Expr\BooleanNot(new Node\Expr\Isset_([(new PropertyPathBuilder($this->propertyPath, $this->pathNode))->getNode()])), ['stmts' => [new Node\Stmt\Throw_(new Node\Expr\New_(new Node\Name(\RuntimeException::class), [new Node\Scalar\String_(strtr('Could not evaluate path %path%', ['%path%' > $this->propertyPath]))]))]]);
     }
 }


34) /var/www/html/src/Compiler/Compiler.php:25    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     private function randomIdentifier() : string
     {
-        return hash('sha256', random_bytes(1024));
+        return hash('sha256', random_bytes(1025));
     }
     private function randomClassName(string $prefix) : string
     {


35) /var/www/html/src/Compiler/Compiler.php:25    [M] DecrementInteger

--- Original
+++ New
@@ @@
     }
     private function randomIdentifier() : string
     {
-        return hash('sha256', random_bytes(1024));
+        return hash('sha256', random_bytes(1023));
     }
     private function randomClassName(string $prefix) : string
     {


36) /var/www/html/src/Compiler/Compiler.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $prefix . $this->randomIdentifier();
     }
-    public function compile(CompilationContext $context)
+    protected function compile(CompilationContext $context)
     {
         $namespace = $context->namespace ?? 'Kiboko\\__Mapper__\\';
         $className = $context->className ?? $this->randomClassName('Mapper');


37) /var/www/html/src/Compiler/Compiler.php:40    [M] Coalesce

--- Original
+++ New
@@ @@
     }
     public function compile(CompilationContext $context)
     {
-        $namespace = $context->namespace ?? 'Kiboko\\__Mapper__\\';
+        $namespace = 'Kiboko\\__Mapper__\\';
         $className = $context->className ?? $this->randomClassName('Mapper');
         if (file_exists($context->path)) {
             include $context->path;


38) /var/www/html/src/Compiler/Compiler.php:41    [M] Coalesce

--- Original
+++ New
@@ @@
     public function compile(CompilationContext $context)
     {
         $namespace = $context->namespace ?? 'Kiboko\\__Mapper__\\';
-        $className = $context->className ?? $this->randomClassName('Mapper');
+        $className = $this->randomClassName('Mapper');
         if (file_exists($context->path)) {
             include $context->path;
         }


39) /var/www/html/src/Compiler/Compiler.php:60    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $tree = $this->buildTree($namespace, $className, ...$context->mappers);
         $prettyPrinter = new PrettyPrinter\Standard();
         echo $prettyPrinter->prettyPrintFile($tree);
-        if ($context->path !== null && is_writable(dirname($context->path))) {
+        if ($context->path !== null || is_writable(dirname($context->path))) {
             file_put_contents($context->path, $prettyPrinter->prettyPrintFile($tree));
             include $context->path;
         } else {


40) /var/www/html/src/Compiler/Compiler.php:60    [M] NotIdentical

--- Original
+++ New
@@ @@
         $tree = $this->buildTree($namespace, $className, ...$context->mappers);
         $prettyPrinter = new PrettyPrinter\Standard();
         echo $prettyPrinter->prettyPrintFile($tree);
-        if ($context->path !== null && is_writable(dirname($context->path))) {
+        if ($context->path === null && is_writable(dirname($context->path))) {
             file_put_contents($context->path, $prettyPrinter->prettyPrintFile($tree));
             include $context->path;
         } else {


41) /var/www/html/src/Compiler/Compiler.php:61    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         $prettyPrinter = new PrettyPrinter\Standard();
         echo $prettyPrinter->prettyPrintFile($tree);
         if ($context->path !== null && is_writable(dirname($context->path))) {
-            file_put_contents($context->path, $prettyPrinter->prettyPrintFile($tree));
+            
             include $context->path;
         } else {
             include 'data://text/plain;base64,' . base64_encode($prettyPrinter->prettyPrintFile($tree));


42) /var/www/html/src/Compiler/Compiler.php:70    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return new $fqcn();
     }
-    public function buildTree(string $namespace, string $className, CompilableMapperInterface ...$mappers) : array
+    protected function buildTree(string $namespace, string $className, CompilableMapperInterface ...$mappers) : array
     {
         $factory = new BuilderFactory();
         $calls = [new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])];


43) /var/www/html/src/Compiler/Compiler.php:74    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function buildTree(string $namespace, string $className, CompilableMapperInterface ...$mappers) : array
     {
         $factory = new BuilderFactory();
-        $calls = [new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])];
+        $calls = [];
         $methods = [];
         foreach ($mappers as $mapper) {
             $methodName = $this->randomMethodName('map_');


44) /var/www/html/src/Compiler/Compiler.php:75    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function buildTree(string $namespace, string $className, CompilableMapperInterface ...$mappers) : array
     {
         $factory = new BuilderFactory();
-        $calls = [new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])];
+        $calls = [new Node\Expr\Array_([], [])];
         $methods = [];
         foreach ($mappers as $mapper) {
             $methodName = $this->randomMethodName('map_');


45) /var/www/html/src/Compiler/Compiler.php:80    [M] Foreach_

--- Original
+++ New
@@ @@
         $factory = new BuilderFactory();
         $calls = [new Node\Expr\Array_([], ['kind' => Node\Expr\Array_::KIND_SHORT])];
         $methods = [];
-        foreach ($mappers as $mapper) {
+        foreach (array() as $mapper) {
             $methodName = $this->randomMethodName('map_');
             $calls[] = new Node\Expr\MethodCall(new Node\Expr\Variable('this'), $methodName, [new Node\Expr\Variable('input'), new Node\Expr\Variable('output')]);
             $methods[] = $this->wrapMapping($methodName, $factory, $mapper->compile());


46) /var/www/html/src/Compiler/Compiler.php:86    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $methods = [];
         foreach ($mappers as $mapper) {
             $methodName = $this->randomMethodName('map_');
-            $calls[] = new Node\Expr\MethodCall(new Node\Expr\Variable('this'), $methodName, [new Node\Expr\Variable('input'), new Node\Expr\Variable('output')]);
+            $calls[] = new Node\Expr\MethodCall(new Node\Expr\Variable('this'), $methodName, [new Node\Expr\Variable('output')]);
             $methods[] = $this->wrapMapping($methodName, $factory, $mapper->compile());
         }
         return [$factory->namespace(rtrim($namespace, '\\'))->addStmt($factory->class($className)->implement(new Node\Name\FullyQualified(MapperInterface::class))->makeFinal()->addStmt($factory->method('__invoke')->makePublic()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmt(new Node\Stmt\Return_(new Node\Expr\FuncCall(new Node\Name('array_merge'), $calls))))->addStmts($methods))->getNode()];


47) /var/www/html/src/Compiler/Compiler.php:94    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $calls[] = new Node\Expr\MethodCall(new Node\Expr\Variable('this'), $methodName, [new Node\Expr\Variable('input'), new Node\Expr\Variable('output')]);
             $methods[] = $this->wrapMapping($methodName, $factory, $mapper->compile());
         }
-        return [$factory->namespace(rtrim($namespace, '\\'))->addStmt($factory->class($className)->implement(new Node\Name\FullyQualified(MapperInterface::class))->makeFinal()->addStmt($factory->method('__invoke')->makePublic()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmt(new Node\Stmt\Return_(new Node\Expr\FuncCall(new Node\Name('array_merge'), $calls))))->addStmts($methods))->getNode()];
+        return [];
     }
     private function wrapMapping(string $methodName, BuilderFactory $factory, array $statements)
     {


48) /var/www/html/src/Compiler/Compiler.php:124    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     private function wrapMapping(string $methodName, BuilderFactory $factory, array $statements)
     {
-        return $factory->method($methodName)->makeFinal()->makePrivate()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmts(array_merge($statements, [new Node\Stmt\Return_(new Node\Expr\Variable('output'))]));
+        return $factory->method($methodName)->makeFinal()->makePrivate()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmts([new Node\Stmt\Return_(new Node\Expr\Variable('output'))]);
     }
 }


49) /var/www/html/src/Compiler/Compiler.php:124    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     private function wrapMapping(string $methodName, BuilderFactory $factory, array $statements)
     {
-        return $factory->method($methodName)->makeFinal()->makePrivate()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmts(array_merge($statements, [new Node\Stmt\Return_(new Node\Expr\Variable('output'))]));
+        return $factory->method($methodName)->makeFinal()->makePrivate()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmts($statements);
     }
 }


50) /var/www/html/src/Compiler/Compiler.php:126    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     private function wrapMapping(string $methodName, BuilderFactory $factory, array $statements)
     {
-        return $factory->method($methodName)->makeFinal()->makePrivate()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmts(array_merge($statements, [new Node\Stmt\Return_(new Node\Expr\Variable('output'))]));
+        return $factory->method($methodName)->makeFinal()->makePrivate()->addParam($factory->param('input'))->addParam($factory->param('output'))->addStmts(array_merge($statements, []));
     }
 }


51) /var/www/html/src/FieldConcatCopyValuesMapper.php:59    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
      */
     public function compile() : array
     {
-        $inputPaths = array_map(function (string $path) {
-            return new PropertyPath($path);
-        }, $this->inputFields);
+        $inputPaths = $this->inputFields;
         $outputPath = new PropertyPath($this->outputField);
         $nodes = array_merge(array_map(function (PropertyPath $path) {

52) /var/www/html/src/FieldConcatCopyValuesMapper.php:61    [M] NewObject

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $inputPaths = array_map(function (string $path) {
-            return new PropertyPath($path);
+            new PropertyPath($path);
+            return null;
         }, $this->inputFields);
         $outputPath = new PropertyPath($this->outputField);
         $nodes = array_merge(array_map(function (PropertyPath $path) {

53) /var/www/html/src/FieldConcatCopyValuesMapper.php:67    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             return new PropertyPath($path);
         }, $this->inputFields);
         $outputPath = new PropertyPath($this->outputField);
-        $nodes = array_merge(array_map(function (PropertyPath $path) {
-            return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        $nodes = ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);

54) /var/www/html/src/FieldConcatCopyValuesMapper.php:67    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             return new PropertyPath($path);
         }, $this->inputFields);
         $outputPath = new PropertyPath($this->outputField);
-        $nodes = array_merge(array_map(function (PropertyPath $path) {
-            return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
-            $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);

55) /var/www/html/src/FieldConcatCopyValuesMapper.php:67    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             return new PropertyPath($path);
         }, $this->inputFields);
         $outputPath = new PropertyPath($this->outputField);
-        $nodes = array_merge(array_map(function (PropertyPath $path) {
+        $nodes = array_map(function (PropertyPath $path) {
             return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
-            $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);

56) /var/www/html/src/FieldConcatCopyValuesMapper.php:67    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             return new PropertyPath($path);
         }, $this->inputFields);
         $outputPath = new PropertyPath($this->outputField);
-        $nodes = array_merge(array_map(function (PropertyPath $path) {
-            return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
-            $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);

57) /var/www/html/src/FieldConcatCopyValuesMapper.php:68    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
             return new PropertyPath($path);
         }, $this->inputFields);
         $outputPath = new PropertyPath($this->outputField);
-        $nodes = array_merge(array_map(function (PropertyPath $path) {
-            return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        $nodes = array_merge($inputPaths, [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);

58) /var/www/html/src/FieldConcatCopyValuesMapper.php:70    [M] NewObject

--- Original
+++ New
@@ @@
         }, $this->inputFields);
         $outputPath = new PropertyPath($this->outputField);
         $nodes = array_merge(array_map(function (PropertyPath $path) {
-            return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
+            new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
+            return null;
         }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);

59) /var/www/html/src/FieldConcatCopyValuesMapper.php:74    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $outputPath = new PropertyPath($this->outputField);
         $nodes = array_merge(array_map(function (PropertyPath $path) {
             return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        }, $inputPaths), [], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);


60) /var/www/html/src/FieldConcatCopyValuesMapper.php:77    [M] GreaterThan

--- Original
+++ New
@@ @@
         $outputPath = new PropertyPath($this->outputField);
         $nodes = array_merge(array_map(function (PropertyPath $path) {
             return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) >= 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);


61) /var/www/html/src/FieldConcatCopyValuesMapper.php:77    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $outputPath = new PropertyPath($this->outputField);
         $nodes = array_merge(array_map(function (PropertyPath $path) {
             return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) <= 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);


62) /var/www/html/src/FieldConcatCopyValuesMapper.php:78    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
         $outputPath = new PropertyPath($this->outputField);
         $nodes = array_merge(array_map(function (PropertyPath $path) {
             return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
-        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
-            $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
+        }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1)) : [], []);
         $it = new \ArrayIterator($inputPaths);

63) /var/www/html/src/FieldConcatCopyValuesMapper.php:84    [M] NewObject

--- Original
+++ New
@@ @@
             return new RequiredValuePreconditionBuilder($path, new Node\Expr\Variable('input'));
         }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
+            new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
+            return null;
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
         $it = new \ArrayIterator($inputPaths);
         $it->rewind();

64) /var/www/html/src/FieldConcatCopyValuesMapper.php:86    [M] IncrementInteger

--- Original
+++ New
@@ @@
         }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 2))) : [], []);
         $it = new \ArrayIterator($inputPaths);
         $it->rewind();
         $values = [];


65) /var/www/html/src/FieldConcatCopyValuesMapper.php:86    [M] Minus

--- Original
+++ New
@@ @@
         }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) + 1))) : [], []);
         $it = new \ArrayIterator($inputPaths);
         $it->rewind();
         $values = [];


66) /var/www/html/src/FieldConcatCopyValuesMapper.php:86    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 0))) : [], []);
         $it = new \ArrayIterator($inputPaths);
         $it->rewind();
         $values = [];


67) /var/www/html/src/FieldConcatCopyValuesMapper.php:86    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
+        }, iterator_to_array(new \LimitIterator($iterator, 1, iterator_count($iterator) - 1))) : [], []);
         $it = new \ArrayIterator($inputPaths);
         $it->rewind();
         $values = [];


68) /var/www/html/src/FieldConcatCopyValuesMapper.php:86    [M] DecrementInteger

--- Original
+++ New
@@ @@
         }, $inputPaths), [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
+        }, iterator_to_array(new \LimitIterator($iterator, -1, iterator_count($iterator) - 1))) : [], []);
         $it = new \ArrayIterator($inputPaths);
         $it->rewind();
         $values = [];


69) /var/www/html/src/FieldConcatCopyValuesMapper.php:93    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
         $it = new \ArrayIterator($inputPaths);
-        $it->rewind();
+        
         $values = [];
         while ($it->valid()) {
             $values[] = (new PropertyPathBuilder($it->current(), new Node\Expr\Variable('input')))->getNode();


70) /var/www/html/src/FieldConcatCopyValuesMapper.php:99    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $values = [];
         while ($it->valid()) {
             $values[] = (new PropertyPathBuilder($it->current(), new Node\Expr\Variable('input')))->getNode();
-            $it->next();
+            
             if (!$it->valid()) {
                 break;
             }


71) /var/www/html/src/FieldConcatCopyValuesMapper.php:100    [M] LogicalNot

--- Original
+++ New
@@ @@
         while ($it->valid()) {
             $values[] = (new PropertyPathBuilder($it->current(), new Node\Expr\Variable('input')))->getNode();
             $it->next();
-            if (!$it->valid()) {
+            if ($it->valid()) {
                 break;
             }
             $values[] = new Node\Scalar\String_($this->glue);


72) /var/www/html/src/FieldConcatCopyValuesMapper.php:101    [M] Break_

--- Original
+++ New
@@ @@
             $values[] = (new PropertyPathBuilder($it->current(), new Node\Expr\Variable('input')))->getNode();
             $it->next();
             if (!$it->valid()) {
-                break;
+                continue;
             }
             $values[] = new Node\Scalar\String_($this->glue);
         }


73) /var/www/html/src/FieldConcatCopyValuesMapper.php:109    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             $values[] = new Node\Scalar\String_($this->glue);
         }
         $factory = new BuilderFactory();
-        return array_merge($nodes, [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), $factory->concat(...$values))]);
+        return [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), $factory->concat(...$values))];
     }
 }


74) /var/www/html/src/FieldConcatCopyValuesMapper.php:109    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             $values[] = new Node\Scalar\String_($this->glue);
         }
         $factory = new BuilderFactory();
-        return array_merge($nodes, [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), $factory->concat(...$values))]);
+        return $nodes;
     }
 }


75) /var/www/html/src/FieldConcatCopyValuesMapper.php:111    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $values[] = new Node\Scalar\String_($this->glue);
         }
         $factory = new BuilderFactory();
-        return array_merge($nodes, [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), $factory->concat(...$values))]);
+        return array_merge($nodes, []);
     }
 }


76) /var/www/html/src/FieldConstantValueMapper.php:46    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
-            $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        return [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))];
     }

77) /var/www/html/src/FieldConstantValueMapper.php:46    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
-            $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        return [new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))];
     }

78) /var/www/html/src/FieldConstantValueMapper.php:46    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        return ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [];

79) /var/www/html/src/FieldConstantValueMapper.php:47    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        return array_merge([], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }

80) /var/www/html/src/FieldConstantValueMapper.php:50    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) <= 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }

81) /var/www/html/src/FieldConstantValueMapper.php:50    [M] GreaterThan

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
+        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) >= 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }

82) /var/www/html/src/FieldConstantValueMapper.php:51    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
     public function compile() : array
     {
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
-            $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1)) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }

83) /var/www/html/src/FieldConstantValueMapper.php:57    [M] NewObject

--- Original
+++ New
@@ @@
         $outputPath = new PropertyPath($this->outputField);
         return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
-            return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
+            new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
+            return null;
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }
 }

84) /var/www/html/src/FieldConstantValueMapper.php:59    [M] IncrementInteger

--- Original
+++ New
@@ @@
         return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 2))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }
 }


85) /var/www/html/src/FieldConstantValueMapper.php:59    [M] Minus

--- Original
+++ New
@@ @@
         return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) + 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }
 }


86) /var/www/html/src/FieldConstantValueMapper.php:59    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 0))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }
 }


87) /var/www/html/src/FieldConstantValueMapper.php:59    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        }, iterator_to_array(new \LimitIterator($iterator, 1, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }
 }


88) /var/www/html/src/FieldConstantValueMapper.php:59    [M] DecrementInteger

--- Original
+++ New
@@ @@
         return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        }, iterator_to_array(new \LimitIterator($iterator, -1, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
     }
 }


89) /var/www/html/src/FieldConstantValueMapper.php:61    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($outputPath, &$outputNode) {
             $outputNode = new Node\Expr\ArrayDimFetch($outputNode, new Node\Scalar\String_($item));
             return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), new Node\Scalar\String_($this->value))]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
     }
 }


90) /var/www/html/src/FieldCopyValueMapper.php:50    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     {
         $inputPath = new PropertyPath($this->inputField);
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
-            if ($iterator->isIndex()) {
-                $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
-                return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-            }
-            if ($iterator->isProperty()) {

91) /var/www/html/src/FieldCopyValueMapper.php:50    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     {
         $inputPath = new PropertyPath($this->inputField);
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
+        return ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
             if ($iterator->isIndex()) {
                 $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
                 return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
@@ @@

92) /var/www/html/src/FieldCopyValueMapper.php:50    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     {
         $inputPath = new PropertyPath($this->inputField);
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
-            if ($iterator->isIndex()) {
-                $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
-                return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-            }
-            if ($iterator->isProperty()) {

93) /var/www/html/src/FieldCopyValueMapper.php:51    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $inputPath = new PropertyPath($this->inputField);
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
+        return array_merge([new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
             if ($iterator->isIndex()) {
                 $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
                 return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);


94) /var/www/html/src/FieldCopyValueMapper.php:55    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
     {
         $inputPath = new PropertyPath($this->inputField);
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
+        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) <= 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
             if ($iterator->isIndex()) {
                 $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
                 return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);


95) /var/www/html/src/FieldCopyValueMapper.php:55    [M] GreaterThan

--- Original
+++ New
@@ @@
     {
         $inputPath = new PropertyPath($this->inputField);
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
+        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) >= 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
             if ($iterator->isIndex()) {
                 $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
                 return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);


96) /var/www/html/src/FieldCopyValueMapper.php:56    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
     {
         $inputPath = new PropertyPath($this->inputField);
         $outputPath = new PropertyPath($this->outputField);
-        return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
-            if ($iterator->isIndex()) {
-                $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
-                return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
-            }
-            if ($iterator->isProperty()) {

97) /var/www/html/src/FieldCopyValueMapper.php:63    [M] NewObject

--- Original
+++ New
@@ @@
         return array_merge([new RequiredValuePreconditionBuilder($inputPath, new Node\Expr\Variable('input')), new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode = new Node\Expr\Variable('output'))], ($count = iterator_count($iterator = $outputPath->getIterator())) > 1 ? array_map(function ($item) use($iterator, $outputPath, &$outputNode) {
             if ($iterator->isIndex()) {
                 $outputNode = new Node\Expr\ArrayDimFetch($outputNode, is_int($item) ? new Node\Scalar\LNumber($item) : new Node\Scalar\String_($item));
-                return new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
+                new ArrayInitialisationPreconditionBuilder($outputPath, $outputNode);
+                return null;
             }
             if ($iterator->isProperty()) {
                 $outputNode = new Node\Expr\PropertyFetch($outputNode, new Node\Name($item));

98) /var/www/html/src/FieldCopyValueMapper.php:70    [M] NewObject

--- Original
+++ New
@@ @@
             }
             if ($iterator->isProperty()) {
                 $outputNode = new Node\Expr\PropertyFetch($outputNode, new Node\Name($item));
-                return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
+                new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
+                return null;
             }
             throw new \RuntimeException('Object initialization is not implemented yet.');
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);

99) /var/www/html/src/FieldCopyValueMapper.php:73    [M] Throw_

--- Original
+++ New
@@ @@
                 $outputNode = new Node\Expr\PropertyFetch($outputNode, new Node\Name($item));
                 return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
             }
-            throw new \RuntimeException('Object initialization is not implemented yet.');
+            new \RuntimeException('Object initialization is not implemented yet.');
         }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
     }
 }


100) /var/www/html/src/FieldCopyValueMapper.php:75    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
             }
             throw new \RuntimeException('Object initialization is not implemented yet.');
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
+        }, iterator_to_array(new \LimitIterator($iterator, -1, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
     }
 }


101) /var/www/html/src/FieldCopyValueMapper.php:75    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
             }
             throw new \RuntimeException('Object initialization is not implemented yet.');
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 0))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
     }
 }


102) /var/www/html/src/FieldCopyValueMapper.php:75    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
             }
             throw new \RuntimeException('Object initialization is not implemented yet.');
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
+        }, iterator_to_array(new \LimitIterator($iterator, 1, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
     }
 }


103) /var/www/html/src/FieldCopyValueMapper.php:75    [M] Minus

--- Original
+++ New
@@ @@
                 return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
             }
             throw new \RuntimeException('Object initialization is not implemented yet.');
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) + 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
     }
 }


104) /var/www/html/src/FieldCopyValueMapper.php:75    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
             }
             throw new \RuntimeException('Object initialization is not implemented yet.');
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 2))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
     }
 }


105) /var/www/html/src/FieldCopyValueMapper.php:77    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 return new ObjectInitialisationPreconditionBuilder($outputPath, $outputNode, new ClassTypeMetadata('Baz', 'Foo\\Bar'));
             }
             throw new \RuntimeException('Object initialization is not implemented yet.');
-        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], [new Node\Expr\Assign((new PropertyPathBuilder($outputPath, new Node\Expr\Variable('output')))->getNode(), (new PropertyPathBuilder($inputPath, new Node\Expr\Variable('input')))->getNode())]);
+        }, iterator_to_array(new \LimitIterator($iterator, 0, iterator_count($iterator) - 1))) : [], []);
     }
 }


106) /var/www/html/src/MappingDefinition/Guesser/FieldDefinitionGuesserChain.php:19    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function __invoke(ClassTypeMetadata $class) : \Generator
     {
-        foreach ($this->inner as $guesser) {
+        foreach (array() as $guesser) {
             yield from $guesser($class);
         }
     }
 }

107) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:15    [M] Foreach_

--- Original
+++ New
@@ @@
 {
     public function __invoke(ClassTypeMetadata $class) : \Generator
     {
-        foreach ($class->properties as $property) {
+        foreach (array() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
             if (count($types) <= 0) {
                 continue;


108) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:17    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
     {
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
-            if (count($types) <= 0) {
+            if (count($types) < 0) {
                 continue;
             }
             (yield new FieldDefinition($property->name, ...array_values($property->types)));


109) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:17    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
     {
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
-            if (count($types) <= 0) {
+            if (count($types) > 0) {
                 continue;
             }
             (yield new FieldDefinition($property->name, ...array_values($property->types)));


110) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:18    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
             if (count($types) <= 0) {
-                continue;
+                break;
             }
             (yield new FieldDefinition($property->name, ...array_values($property->types)));
         }


111) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:23    [M] UnwrapArrayValues

--- Original
+++ New
@@ @@
             if (count($types) <= 0) {
                 continue;
             }
-            (yield new FieldDefinition($property->name, ...array_values($property->types)));
+            (yield new FieldDefinition($property->name, ...$property->types));
         }
     }
     private function filterTypes(TypeMetadata ...$types) : \Generator


112) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:30    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
-        foreach ($types as $type) {
+        foreach (array() as $type) {
             if (!$type instanceof ScalarTypeMetadata && !$type instanceof ArrayTypeMetadata) {
                 continue;
             }


113) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:31    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ScalarTypeMetadata && !$type instanceof ArrayTypeMetadata) {
+            if ($type instanceof ScalarTypeMetadata && !$type instanceof ArrayTypeMetadata) {
                 continue;
             }
             (yield $type);


114) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ScalarTypeMetadata && !$type instanceof ArrayTypeMetadata) {
+            if (!$type instanceof ScalarTypeMetadata || !$type instanceof ArrayTypeMetadata) {
                 continue;
             }
             (yield $type);


115) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:32    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ScalarTypeMetadata && !$type instanceof ArrayTypeMetadata) {
+            if (!$type instanceof ScalarTypeMetadata && $type instanceof ArrayTypeMetadata) {
                 continue;
             }
             (yield $type);


116) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyFieldGuesser.php:34    [M] Continue_

--- Original
+++ New
@@ @@
     {
         foreach ($types as $type) {
             if (!$type instanceof ScalarTypeMetadata && !$type instanceof ArrayTypeMetadata) {
-                continue;
+                break;
             }
             (yield $type);
         }
     }

117) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:15    [M] Foreach_

--- Original
+++ New
@@ @@
 {
     public function __invoke(ClassTypeMetadata $class) : \Generator
     {
-        foreach ($class->properties as $property) {
+        foreach (array() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
             if (count($types) <= 0) {
                 continue;


118) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:17    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
     {
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
-            if (count($types) <= 0) {
+            if (count($types) < 0) {
                 continue;
             }
             (yield new MultipleRelationDefinition($property->name, ...$types));


119) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:17    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
     {
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
-            if (count($types) <= 0) {
+            if (count($types) > 0) {
                 continue;
             }
             (yield new MultipleRelationDefinition($property->name, ...$types));


120) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:18    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
             if (count($types) <= 0) {
-                continue;
+                break;
             }
             (yield new MultipleRelationDefinition($property->name, ...$types));
         }


121) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:30    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
-        foreach ($types as $type) {
+        foreach (array() as $type) {
             if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
                 continue;
             }


122) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
+            if (!$type instanceof ListTypeMetadata || !$type instanceof CollectionTypeMetadata) {
                 continue;
             }
             (yield $type);


123) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:31    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
+            if ($type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
                 continue;
             }
             (yield $type);


124) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:32    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
+            if (!$type instanceof ListTypeMetadata && $type instanceof CollectionTypeMetadata) {
                 continue;
             }
             (yield $type);


125) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyMultipleRelationGuesser.php:34    [M] Continue_

--- Original
+++ New
@@ @@
     {
         foreach ($types as $type) {
             if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
-                continue;
+                break;
             }
             (yield $type);
         }
     }

126) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyUnaryRelationGuesser.php:14    [M] Foreach_

--- Original
+++ New
@@ @@
 {
     public function __invoke(ClassTypeMetadata $class) : \Generator
     {
-        foreach ($class->properties as $property) {
+        foreach (array() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
             if (count($types) <= 0) {
                 continue;


127) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyUnaryRelationGuesser.php:16    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
     {
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
-            if (count($types) <= 0) {
+            if (count($types) < 0) {
                 continue;
             }
             (yield new UnaryRelationDefinition($property->name, ...$types));


128) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyUnaryRelationGuesser.php:16    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
     {
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
-            if (count($types) <= 0) {
+            if (count($types) > 0) {
                 continue;
             }
             (yield new UnaryRelationDefinition($property->name, ...$types));


129) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyUnaryRelationGuesser.php:17    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($class->properties as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->types));
             if (count($types) <= 0) {
-                continue;
+                break;
             }
             (yield new UnaryRelationDefinition($property->name, ...$types));
         }


130) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyUnaryRelationGuesser.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
-        foreach ($types as $type) {
+        foreach (array() as $type) {
             if (!$type instanceof CompositeTypeMetadata) {
                 continue;
             }


131) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyUnaryRelationGuesser.php:30    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadata ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof CompositeTypeMetadata) {
+            if ($type instanceof CompositeTypeMetadata) {
                 continue;
             }
             (yield $type);


132) /var/www/html/src/MappingDefinition/Guesser/PublicPropertyUnaryRelationGuesser.php:31    [M] Continue_

--- Original
+++ New
@@ @@
     {
         foreach ($types as $type) {
             if (!$type instanceof CompositeTypeMetadata) {
-                continue;
+                break;
             }
             (yield $type);
         }
     }

133) /var/www/html/src/MappingDefinition/Guesser/RelationDefinitionGuesserChain.php:19    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function __invoke(ClassTypeMetadata $class) : \Generator
     {
-        foreach ($this->inner as $guesser) {
+        foreach (array() as $guesser) {
             yield from $guesser($class);
         }
     }
 }

134) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:20    [M] Coalesce

--- Original
+++ New
@@ @@
     private $inflector;
     public function __construct(?Inflector $inflector = null)
     {
-        $this->inflector = $inflector ?? (new English\InflectorFactory())();
+        $this->inflector = (new English\InflectorFactory())();
     }
     private function isSingular(string $field) : bool
     {


135) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:25    [M] Identical

--- Original
+++ New
@@ @@
     }
     private function isSingular(string $field) : bool
     {
-        return $this->inflector->singularize($field) === $field;
+        return $this->inflector->singularize($field) !== $field;
     }
     public function __invoke(ClassTypeMetadata $class) : \Generator
     {


136) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:32    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $methodCandidates = [];
         /** @var MethodMetadata $method */
-        foreach ($class->methods as $method) {
+        foreach (array() as $method) {
             if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {


137) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:33    [M] PregMatchMatches

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+            if ((int) ($matches = array()) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


138) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:33    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) || count($method->argumentList->arguments) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


139) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:33    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+            if ((preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) || Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes)) && count($method->argumentList->arguments) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


140) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:35    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 1) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


141) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:35    [M] Identical

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) !== 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


142) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:38    [M] LogicalNot

--- Original
+++ New
@@ @@
         foreach ($class->methods as $method) {
             if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
-                if (!$this->isSingular($fieldName)) {
+                if ($this->isSingular($fieldName)) {
                     continue;
                 }
                 if (!isset($methodCandidates[$fieldName])) {


143) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:39    [M] Continue_

--- Original
+++ New
@@ @@
             if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
-                    continue;
+                    break;
                 }
                 if (!isset($methodCandidates[$fieldName])) {
                     $methodCandidates[$fieldName] = [];


144) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:41    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (!$this->isSingular($fieldName)) {
                     continue;
                 }
-                if (!isset($methodCandidates[$fieldName])) {
+                if (isset($methodCandidates[$fieldName])) {
                     $methodCandidates[$fieldName] = [];
                 }
                 $methodCandidates[$fieldName]['is'] = $method;


145) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:46    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) || count($method->argumentList->arguments) === 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


146) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:46    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+                if ((int) ($matches = array()) && count($method->argumentList->arguments) === 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


147) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:47    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


148) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:47    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 2) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


149) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:47    [M] Identical

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) !== 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


150) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:51    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
-                    if (!$this->isSingular($fieldName)) {
+                    if ($this->isSingular($fieldName)) {
                         continue;
                     }
                     if (!isset($methodCandidates[$fieldName])) {


151) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:52    [M] Continue_

--- Original
+++ New
@@ @@
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {
-                        continue;
+                        break;
                     }
                     if (!isset($methodCandidates[$fieldName])) {
                         $methodCandidates[$fieldName] = [];


152) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:54    [M] LogicalNot

--- Original
+++ New
@@ @@
                     if (!$this->isSingular($fieldName)) {
                         continue;
                     }
-                    if (!isset($methodCandidates[$fieldName])) {
+                    if (isset($methodCandidates[$fieldName])) {
                         $methodCandidates[$fieldName] = [];
                     }
                     $methodCandidates[$fieldName][$action] = $method;


153) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:59    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                    if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) || count($method->argumentList->arguments) === 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


154) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:59    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                    if ((int) ($matches = array()) && count($method->argumentList->arguments) === 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


155) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:60    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                    if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


156) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:60    [M] Identical

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                    if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) !== 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


157) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:64    [M] LogicalNot

--- Original
+++ New
@@ @@
                     if (preg_match('/(?<action>unset|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
-                        if (!$this->isSingular($fieldName)) {
+                        if ($this->isSingular($fieldName)) {
                             continue;
                         }
                         if (!isset($methodCandidates[$fieldName])) {


158) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:65    [M] Continue_

--- Original
+++ New
@@ @@
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {
-                            continue;
+                            break;
                         }
                         if (!isset($methodCandidates[$fieldName])) {
                             $methodCandidates[$fieldName] = [];


159) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:67    [M] LogicalNot

--- Original
+++ New
@@ @@
                         if (!$this->isSingular($fieldName)) {
                             continue;
                         }
-                        if (!isset($methodCandidates[$fieldName])) {
+                        if (isset($methodCandidates[$fieldName])) {
                             $methodCandidates[$fieldName] = [];
                         }
                         $methodCandidates[$fieldName][$action] = $method;


160) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:75    [M] Foreach_

--- Original
+++ New
@@ @@
                 }
             }
         }
-        foreach ($methodCandidates as $fieldName => $actions) {
+        foreach (array() as $fieldName => $actions) {
             /** @var MethodMetadata $accessor */
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */


161) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:77    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $fieldName => $actions) {
             /** @var MethodMetadata $accessor */
-            $accessor = $actions['get'] ?? $actions['is'] ?? null;
+            $accessor = $actions['get'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
             if (!isset($accessor) && !isset($mutator)) {


162) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:77    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $fieldName => $actions) {
             /** @var MethodMetadata $accessor */
-            $accessor = $actions['get'] ?? $actions['is'] ?? null;
+            $accessor = $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
             if (!isset($accessor) && !isset($mutator)) {


163) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:79    [M] Coalesce

--- Original
+++ New
@@ @@
             /** @var MethodMetadata $accessor */
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
-            $mutator = $actions['set'] ?? null;
+            $mutator = null;
             if (!isset($accessor) && !isset($mutator)) {
                 continue;
             }


164) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:81    [M] LogicalNot

--- Original
+++ New
@@ @@
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
-            if (!isset($accessor) && !isset($mutator)) {
+            if (isset($accessor) && !isset($mutator)) {
                 continue;
             }
             (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? null));


165) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:81    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
-            if (!isset($accessor) && !isset($mutator)) {
+            if (!isset($accessor) || !isset($mutator)) {
                 continue;
             }
             (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? null));


166) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:81    [M] LogicalNot

--- Original
+++ New
@@ @@
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
-            if (!isset($accessor) && !isset($mutator)) {
+            if (!isset($accessor) && isset($mutator)) {
                 continue;
             }
             (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? null));


167) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:82    [M] Continue_

--- Original
+++ New
@@ @@
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
             if (!isset($accessor) && !isset($mutator)) {
-                continue;
+                break;
             }
             (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? null));
         }
     }

168) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:89    [M] Coalesce

--- Original
+++ New
@@ @@
             if (!isset($accessor) && !isset($mutator)) {
                 continue;
             }
-            (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? null));
+            (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, null, $actions['unset'] ?? null));
         }
     }
 }


169) /var/www/html/src/MappingDefinition/Guesser/VirtualFieldGuesser.php:90    [M] Coalesce

--- Original
+++ New
@@ @@
             if (!isset($accessor) && !isset($mutator)) {
                 continue;
             }
-            (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? null));
+            (yield new VirtualFieldDefinition($fieldName, $accessor, $mutator, $actions['has'] ?? null, null));
         }
     }
 }


170) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:26    [M] Identical

--- Original
+++ New
@@ @@
     }
     private function isPlural(string $field) : bool
     {
-        return $this->inflector->pluralize($field) === $field;
+        return $this->inflector->pluralize($field) !== $field;
     }
     private function isSingular(string $field) : bool
     {


171) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:31    [M] Identical

--- Original
+++ New
@@ @@
     }
     private function isSingular(string $field) : bool
     {
-        return $this->inflector->singularize($field) === $field;
+        return $this->inflector->singularize($field) !== $field;
     }
     public function __invoke(ClassTypeMetadata $class) : \Generator
     {


172) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $methodCandidates = [];
         /** @var MethodMetadata $method */
-        foreach ($class->methods as $method) {
+        foreach (array() as $method) {
             if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);


173) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:39    [M] PregMatchMatches

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+            if ((int) ($matches = array()) && count($method->argumentList->arguments) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


174) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:39    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) || count($method->argumentList->arguments) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


175) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:40    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 2) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


176) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:40    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


177) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:40    [M] Identical

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->methods as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) !== 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


178) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:44    [M] LogicalNot

--- Original
+++ New
@@ @@
             if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
-                if (!isset($methodCandidates[$relationName])) {
+                if (isset($methodCandidates[$relationName])) {
                     $methodCandidates[$relationName] = [];
                 }
                 $methodCandidates[$relationName][$action] = $method;


179) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:49    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) || count($method->argumentList->arguments) === 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


180) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:49    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                if ((int) ($matches = array()) && count($method->argumentList->arguments) === 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


181) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:50    [M] Identical

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) !== 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


182) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:50    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
+                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 1) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


183) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:54    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && count($method->argumentList->arguments) === 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
-                    if (!isset($methodCandidates[$relationName])) {
+                    if (isset($methodCandidates[$relationName])) {
                         $methodCandidates[$relationName] = [];
                     }
                     $methodCandidates[$relationName][$action] = $method;


184) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:59    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                    if ((int) ($matches = array()) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


185) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:59    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                    if ((preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) || Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes)) && count($method->argumentList->arguments) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


186) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:59    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) || count($method->argumentList->arguments) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


187) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:61    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 1) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


188) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:61    [M] Identical

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) !== 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


189) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:64    [M] LogicalNot

--- Original
+++ New
@@ @@
                 } else {
                     if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
-                        if (!isset($methodCandidates[$relationName])) {
+                        if (isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];
                         }
                         $methodCandidates[$relationName]['count'] = $method;


190) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:69    [M] LogicalAnd

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                        if ((preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) || Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes)) && count($method->argumentList->arguments) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


191) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:69    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                        if ((int) ($matches = array()) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


192) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:69    [M] LogicalAnd

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) || count($method->argumentList->arguments) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


193) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:71    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 1) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


194) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:71    [M] Identical

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
+                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) !== 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


195) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:74    [M] LogicalNot

--- Original
+++ New
@@ @@
                     } else {
                         if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->name, $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), $method->returnTypes) && count($method->argumentList->arguments) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
-                            if (!isset($methodCandidates[$relationName])) {
+                            if (isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];
                             }
                             $methodCandidates[$relationName]['walk'] = $method;


196) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:82    [M] Foreach_

--- Original
+++ New
@@ @@
                 }
             }
         }
-        foreach ($methodCandidates as $relationName => $actions) {
+        foreach (array() as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
                 (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }


197) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:86    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationDefinition($relationName, null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


198) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:87    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


199) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:88    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


200) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:89    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


201) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:90    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


202) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:91    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


203) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:97    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationDefinition($relationName, $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
             }
         }
     }
 }

204) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:97    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
             }
         }
     }
 }

205) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:98    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, null, $actions['has'] ?? null, $actions['unset'] ?? null));
             }
         }
     }
 }

206) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:99    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, null, $actions['unset'] ?? null));
             }
         }
     }
 }

207) /var/www/html/src/MappingDefinition/Guesser/VirtualRelationGuesser.php:100    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationDefinition($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationDefinition($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, null));
             }
         }
     }
 }

208) /var/www/html/src/MappingDefinition/MappedClassType.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->fields = [];
         $this->relations = [];
     }
-    public function fields(Field\FieldDefinitionInterface ...$fields) : self
+    protected function fields(Field\FieldDefinitionInterface ...$fields) : self
     {
         foreach ($fields as $field) {
             $this->fields[$field->name] = $field;


209) /var/www/html/src/MappingDefinition/MappedClassType.php:26    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function fields(Field\FieldDefinitionInterface ...$fields) : self
     {
-        foreach ($fields as $field) {
+        foreach (array() as $field) {
             $this->fields[$field->name] = $field;
         }
         return $this;


210) /var/www/html/src/MappingDefinition/MappedClassType.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this;
     }
-    public function relations(Relation\RelationDefinitionInterface ...$relations) : self
+    protected function relations(Relation\RelationDefinitionInterface ...$relations) : self
     {
         foreach ($relations as $relation) {
             $this->relations[$relation->name] = $relation;


211) /var/www/html/src/MappingDefinition/MappedClassType.php:35    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function relations(Relation\RelationDefinitionInterface ...$relations) : self
     {
-        foreach ($relations as $relation) {
+        foreach (array() as $relation) {
             $this->relations[$relation->name] = $relation;
         }
         return $this;


212) /var/www/html/src/MappingDefinition/MappedClassType.php:44    [M] CastString

--- Original
+++ New
@@ @@
     }
     public function __toString()
     {
-        return (string) $this->metadata;
+        return $this->metadata;
     }
 }


213) /var/www/html/src/MappingDefinition/MappingIterator.php:68    [M] NewObject

--- Original
+++ New
@@ @@
     }
     public function getChildren()
     {
-        return new self($this->current(), ...$this->builders);
+        new self($this->current(), ...$this->builders);
+        return null;
     }
 }
